---
source: src/parser/match.rs
expression: "contents.lines().filter_map(|line|\n                if line != \"\" {\n                        Some(format!(\"{line}\\n{}\",\n                                |parser| format!(\"{:#?}\", Match::try_from (parser))\n                                (& mut Parser :: new(line.parse().unwrap()))))\n                    } else { None }).collect::<Vec<String>>().join(\"\\n\\n\")"
---
(match 100 (10 1) (_ 0))
Ok(
    Match {
        against: Literal(
            Int(
                false,
                100,
            ),
        ),
        branches: [
            Branch {
                pattern: Literal(
                    Int(
                        false,
                        10,
                    ),
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        1,
                    ),
                ),
            },
            Branch {
                pattern: Var(
                    "_",
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        0,
                    ),
                ),
            },
        ],
    },
)

(match (Option->None) (Option->None 1) ((Option->Some var) if (= var 10) 0) ((Option->Some _) 3))
Ok(
    Match {
        against: TypeCreation(
            Simple(
                Space(
                    "Option",
                    Final(
                        "None",
                    ),
                ),
            ),
        ),
        branches: [
            Branch {
                pattern: Type(
                    Simple(
                        Space(
                            "Option",
                            Final(
                                "None",
                            ),
                        ),
                    ),
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        1,
                    ),
                ),
            },
            Branch {
                pattern: Type(
                    Vars(
                        Space(
                            "Option",
                            Final(
                                "Some",
                            ),
                        ),
                        [
                            Variable(
                                "var",
                            ),
                        ],
                    ),
                ),
                check: Some(
                    Infix(
                        Equality(
                            Variable(
                                "var",
                            ),
                            Literal(
                                Int(
                                    false,
                                    10,
                                ),
                            ),
                        ),
                    ),
                ),
                ret: Literal(
                    Int(
                        false,
                        0,
                    ),
                ),
            },
            Branch {
                pattern: Type(
                    Vars(
                        Space(
                            "Option",
                            Final(
                                "Some",
                            ),
                        ),
                        [
                            Variable(
                                "_",
                            ),
                        ],
                    ),
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        3,
                    ),
                ),
            },
        ],
    },
)

(match StructType { x->100 y->"hello" } (StructType { x->100 y->"hi" } 3) (StructType { x->var y->"hello" } var) (_ 0))
Ok(
    Match {
        against: TypeCreation(
            Struct(
                Final(
                    "StructType",
                ),
                [
                    (
                        "x",
                        Literal(
                            Int(
                                false,
                                100,
                            ),
                        ),
                    ),
                    (
                        "y",
                        Literal(
                            String(
                                "hello",
                            ),
                        ),
                    ),
                ],
            ),
        ),
        branches: [
            Branch {
                pattern: Type(
                    Struct(
                        Final(
                            "StructType",
                        ),
                        [
                            (
                                "x",
                                Literal(
                                    Int(
                                        false,
                                        100,
                                    ),
                                ),
                            ),
                            (
                                "y",
                                Literal(
                                    String(
                                        "hi",
                                    ),
                                ),
                            ),
                        ],
                    ),
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        3,
                    ),
                ),
            },
            Branch {
                pattern: Type(
                    Struct(
                        Final(
                            "StructType",
                        ),
                        [
                            (
                                "x",
                                Variable(
                                    "var",
                                ),
                            ),
                            (
                                "y",
                                Literal(
                                    String(
                                        "hello",
                                    ),
                                ),
                            ),
                        ],
                    ),
                ),
                check: None,
                ret: Variable(
                    "var",
                ),
            },
            Branch {
                pattern: Var(
                    "_",
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        0,
                    ),
                ),
            },
        ],
    },
)
