---
source: src/parser/match.rs
expression: "contents.lines().filter_map(|line|\n                if line != \"\" {\n                        Some(format!(\"{line}\\n{}\",\n                                |parser| format!(\"{:#?}\", Match::try_from (parser))\n                                (& mut Parser :: new(line.parse().unwrap()))))\n                    } else { None }).collect::<Vec<String>>().join(\"\\n\\n\")"
---
(match 100 (10 1) (_ 0))
Ok(
    Match {
        against: Literal(
            Int(
                false,
                100,
            ),
        ),
        branches: [
            Branch {
                pattern: Literal(
                    Int(
                        false,
                        10,
                    ),
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        1,
                    ),
                ),
            },
            Branch {
                pattern: Var(
                    "_",
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        0,
                    ),
                ),
            },
        ],
    },
)

(match (Option->None) (Option->None 1) ((Option->Some var) if (= var 10) 0) ((Option->Some _) 3))
Ok(
    Match {
        against: TypeCreation(
            TypeCreation {
                name: Space(
                    "Option",
                    Final(
                        "None",
                    ),
                ),
                args: [],
            },
        ),
        branches: [
            Branch {
                pattern: Type(
                    TypeCreation {
                        name: Space(
                            "Option",
                            Final(
                                "None",
                            ),
                        ),
                        args: [],
                    },
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        1,
                    ),
                ),
            },
            Branch {
                pattern: Type(
                    TypeCreation {
                        name: Space(
                            "Option",
                            Final(
                                "Some",
                            ),
                        ),
                        args: [
                            Identifier(
                                "var",
                            ),
                        ],
                    },
                ),
                check: Some(
                    Call(
                        Call {
                            func: Right(
                                "=",
                            ),
                            params: [
                                Identifier(
                                    "var",
                                ),
                                Literal(
                                    Int(
                                        false,
                                        10,
                                    ),
                                ),
                            ],
                        },
                    ),
                ),
                ret: Literal(
                    Int(
                        false,
                        0,
                    ),
                ),
            },
            Branch {
                pattern: Type(
                    TypeCreation {
                        name: Space(
                            "Option",
                            Final(
                                "Some",
                            ),
                        ),
                        args: [
                            Identifier(
                                "_",
                            ),
                        ],
                    },
                ),
                check: None,
                ret: Literal(
                    Int(
                        false,
                        3,
                    ),
                ),
            },
        ],
    },
)
