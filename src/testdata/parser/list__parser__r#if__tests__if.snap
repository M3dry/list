---
source: src/parser/if.rs
expression: "contents.lines().filter_map(|line|\n                if line != \"\" {\n                        Some(format!(\"{line}\\n{}\",\n                                |parser| format!(\"{:#?}\", If::try_from (parser))\n                                (& mut Parser :: new(line.parse().unwrap()))))\n                    } else { None }).collect::<Vec<String>>().join(\"\\n\\n\")"
---
(if true 10 4)
Ok(
    If {
        condition: Literal(
            Bool(
                true,
            ),
        ),
        true_branch: Literal(
            Int(
                false,
                10,
            ),
        ),
        false_branch: Literal(
            Int(
                false,
                4,
            ),
        ),
    },
)

(if (= 10 5) 10 (func 4 10))
Ok(
    If {
        condition: Infix(
            Equality(
                Literal(
                    Int(
                        false,
                        10,
                    ),
                ),
                Literal(
                    Int(
                        false,
                        5,
                    ),
                ),
            ),
        ),
        true_branch: Literal(
            Int(
                false,
                10,
            ),
        ),
        false_branch: FuncCall(
            Variable(
                "func",
            ),
            [
                Literal(
                    Int(
                        false,
                        4,
                    ),
                ),
                Literal(
                    Int(
                        false,
                        10,
                    ),
                ),
            ],
        ),
    },
)

(if (= (func 1 10) (xyzfunc 100 (+ 1 10))) 100 (xyzfunc 100 200))
Ok(
    If {
        condition: Infix(
            Equality(
                FuncCall(
                    Variable(
                        "func",
                    ),
                    [
                        Literal(
                            Int(
                                false,
                                1,
                            ),
                        ),
                        Literal(
                            Int(
                                false,
                                10,
                            ),
                        ),
                    ],
                ),
                FuncCall(
                    Variable(
                        "xyzfunc",
                    ),
                    [
                        Literal(
                            Int(
                                false,
                                100,
                            ),
                        ),
                        Infix(
                            Add(
                                Literal(
                                    Int(
                                        false,
                                        1,
                                    ),
                                ),
                                Literal(
                                    Int(
                                        false,
                                        10,
                                    ),
                                ),
                            ),
                        ),
                    ],
                ),
            ),
        ),
        true_branch: Literal(
            Int(
                false,
                100,
            ),
        ),
        false_branch: FuncCall(
            Variable(
                "xyzfunc",
            ),
            [
                Literal(
                    Int(
                        false,
                        100,
                    ),
                ),
                Literal(
                    Int(
                        false,
                        200,
                    ),
                ),
            ],
        ),
    },
)
