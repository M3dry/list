---
source: src/parser/struct.rs
expression: "contents.lines().filter_map(|line|\n                if line != \"\" {\n                        Some(format!(\"{line}\\n{:#?}\", Struct::try_from\n                                (& mut Parser :: new(line.parse().unwrap()))))\n                    } else { None }).collect::<Vec<String>>().join(\"\\n\\n\")"
---
(struct Hello { x->i32 y->string })
Ok(
    Struct {
        name: "Hello",
        generics: [],
        fields: StructFields(
            [
                StructField {
                    name: "x",
                    type: Builtin(
                        I32,
                    ),
                },
                StructField {
                    name: "y",
                    type: Builtin(
                        String,
                    ),
                },
            ],
        ),
    },
)

(struct Hello :t :x { x->:t y->:x })
Ok(
    Struct {
        name: "Hello",
        generics: [
            "t",
            "x",
        ],
        fields: StructFields(
            [
                StructField {
                    name: "x",
                    type: Generic(
                        "t",
                    ),
                },
                StructField {
                    name: "y",
                    type: Generic(
                        "x",
                    ),
                },
            ],
        ),
    },
)

(struct Hello :t {})
Ok(
    Struct {
        name: "Hello",
        generics: [
            "t",
        ],
        fields: StructFields(
            [],
        ),
    },
)
