---
source: src/parser/struct.rs
expression: "contents.lines().filter_map(|line|\n                if line != \"\" {\n                        Some(format!(\"{line}\\n{}\",\n                                |parser| format!(\"{:#?}\", Struct::try_from (parser))\n                                (& mut Parser :: new(line.parse().unwrap()))))\n                    } else { None }).collect::<Vec<String>>().join(\"\\n\\n\")"
---
(struct Hello { x->i32 y->string })
Ok(
    Normal {
        name: "Hello",
        generics: [],
        fields: StructFields(
            [
                StructField {
                    attr: None,
                    name: "x",
                    type: Builtin(
                        I32,
                    ),
                },
                StructField {
                    attr: None,
                    name: "y",
                    type: Builtin(
                        String,
                    ),
                },
            ],
        ),
    },
)

(struct Hello :t :x { x->:t y->:x })
Ok(
    Normal {
        name: "Hello",
        generics: [
            Use(
                "t",
            ),
            Use(
                "x",
            ),
        ],
        fields: StructFields(
            [
                StructField {
                    attr: None,
                    name: "x",
                    type: Generic(
                        Use(
                            "t",
                        ),
                    ),
                },
                StructField {
                    attr: None,
                    name: "y",
                    type: Generic(
                        Use(
                            "x",
                        ),
                    ),
                },
            ],
        ),
    },
)

(struct Hello :t {})
Ok(
    Normal {
        name: "Hello",
        generics: [
            Use(
                "t",
            ),
        ],
        fields: StructFields(
            [],
        ),
    },
)
