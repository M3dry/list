---
source: src/parser/tests.rs
expression: "contents.lines().filter_map(|line|\n                if line != \"\" {\n                        Some(format!(\"{line}\\n{}\",\n                                |parser| format!(\"{:#?}\", Match::try_from (parser))\n                                (& mut Parser :: new(line.parse().unwrap()))))\n                    } else { None }).collect::<Vec<String>>().join(\"\\n\\n\")"
---
(match 100 (10 1) (_ 0))
Ok(
    Match {
        against: Literal(
            Int(
                Int(
                    false,
                    100,
                ),
            ),
        ),
        branches: [
            Branch {
                pattern: Literal(
                    Int(
                        Int(
                            false,
                            10,
                        ),
                    ),
                ),
                check: None,
                ret: Literal(
                    Int(
                        Int(
                            false,
                            1,
                        ),
                    ),
                ),
            },
            Branch {
                pattern: Variable(
                    "_",
                ),
                check: None,
                ret: Literal(
                    Int(
                        Int(
                            false,
                            0,
                        ),
                    ),
                ),
            },
        ],
    },
)

(match (Option->None) (Option->None 1) ((Option->Some var) if (= var 10) 0) ((Option->Some _) 3))
Ok(
    Match {
        against: TypeCreation(
            Vars(
                Space(
                    Identifier(
                        "Option",
                    ),
                    Str(
                        Identifier(
                            "None",
                        ),
                    ),
                ),
                [],
            ),
        ),
        branches: [
            Branch {
                pattern: Enum(
                    Space(
                        Identifier(
                            "Option",
                        ),
                        Str(
                            Identifier(
                                "None",
                            ),
                        ),
                    ),
                ),
                check: None,
                ret: Literal(
                    Int(
                        Int(
                            false,
                            1,
                        ),
                    ),
                ),
            },
            Branch {
                pattern: EnumVars(
                    Space(
                        Identifier(
                            "Option",
                        ),
                        Str(
                            Identifier(
                                "Some",
                            ),
                        ),
                    ),
                    [
                        Variable(
                            "var",
                        ),
                    ],
                ),
                check: Some(
                    Infix(
                        Equality(
                            Variable(
                                "var",
                            ),
                            Literal(
                                Int(
                                    Int(
                                        false,
                                        10,
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                ret: Literal(
                    Int(
                        Int(
                            false,
                            0,
                        ),
                    ),
                ),
            },
            Branch {
                pattern: EnumVars(
                    Space(
                        Identifier(
                            "Option",
                        ),
                        Str(
                            Identifier(
                                "Some",
                            ),
                        ),
                    ),
                    [
                        Variable(
                            "_",
                        ),
                    ],
                ),
                check: None,
                ret: Literal(
                    Int(
                        Int(
                            false,
                            3,
                        ),
                    ),
                ),
            },
        ],
    },
)

(match (StructType { x->100 y->"hello" }) ((StructType { x->100 y->"hi" }) 3) ((StructType { x->var y->"hello" }) var) (_ 0))
Ok(
    Match {
        against: TypeCreation(
            Struct(
                Str(
                    Identifier(
                        "StructType",
                    ),
                ),
                [
                    (
                        "x",
                        Literal(
                            Int(
                                Int(
                                    false,
                                    100,
                                ),
                            ),
                        ),
                    ),
                    (
                        "y",
                        Literal(
                            String(
                                "hello",
                            ),
                        ),
                    ),
                ],
            ),
        ),
        branches: [
            Branch {
                pattern: Struct(
                    Str(
                        Identifier(
                            "StructType",
                        ),
                    ),
                    [
                        Left(
                            (
                                "x",
                                Literal(
                                    Int(
                                        Int(
                                            false,
                                            100,
                                        ),
                                    ),
                                ),
                            ),
                        ),
                        Left(
                            (
                                "y",
                                Literal(
                                    String(
                                        "hi",
                                    ),
                                ),
                            ),
                        ),
                    ],
                ),
                check: None,
                ret: Literal(
                    Int(
                        Int(
                            false,
                            3,
                        ),
                    ),
                ),
            },
            Branch {
                pattern: Struct(
                    Str(
                        Identifier(
                            "StructType",
                        ),
                    ),
                    [
                        Left(
                            (
                                "x",
                                Variable(
                                    "var",
                                ),
                            ),
                        ),
                        Left(
                            (
                                "y",
                                Literal(
                                    String(
                                        "hello",
                                    ),
                                ),
                            ),
                        ),
                    ],
                ),
                check: None,
                ret: Variable(
                    "var",
                ),
            },
            Branch {
                pattern: Variable(
                    "_",
                ),
                check: None,
                ret: Literal(
                    Int(
                        Int(
                            false,
                            0,
                        ),
                    ),
                ),
            },
        ],
    },
)
