---
source: src/tokenizer.rs
expression: "contents.lines().filter_map(|line|\n                if line != \"\" {\n                        Some(format!(\"{line}\\n{:#?}\", Tokens :: from_str(line)))\n                    } else { None }).collect::<Vec<String>>().join(\"\\n\\n\")"
---
(defun func (x->i32)->string "hello")
Ok(
    Tokens(
        [
            ParenOpen,
            Keyword(
                Defun,
            ),
            Identifier(
                "func",
            ),
            ParenOpen,
            Identifier(
                "x",
            ),
            Keyword(
                LeftArrow,
            ),
            Type(
                I32,
            ),
            ParenClose,
            Keyword(
                LeftArrow,
            ),
            Type(
                String,
            ),
            Literal(
                String(
                    "hello",
                ),
            ),
            ParenClose,
        ],
    ),
)

(pub defun func (x->i32 y->i128)->i64 (+ x y))
Ok(
    Tokens(
        [
            ParenOpen,
            Identifier(
                "pub",
            ),
            Keyword(
                Defun,
            ),
            Identifier(
                "func",
            ),
            ParenOpen,
            Identifier(
                "x",
            ),
            Keyword(
                LeftArrow,
            ),
            Type(
                I32,
            ),
            Identifier(
                "y",
            ),
            Keyword(
                LeftArrow,
            ),
            Type(
                I128,
            ),
            ParenClose,
            Keyword(
                LeftArrow,
            ),
            Type(
                I64,
            ),
            ParenOpen,
            Char(
                '+',
            ),
            Identifier(
                "x",
            ),
            Identifier(
                "y",
            ),
            ParenClose,
            ParenClose,
        ],
    ),
)

(crate defun func (:t x->:t y->:t)->:t x)
Ok(
    Tokens(
        [
            ParenOpen,
            Identifier(
                "crate",
            ),
            Keyword(
                Defun,
            ),
            Identifier(
                "func",
            ),
            ParenOpen,
            Char(
                ':',
            ),
            Identifier(
                "t",
            ),
            Identifier(
                "x",
            ),
            Keyword(
                LeftArrow,
            ),
            Char(
                ':',
            ),
            Identifier(
                "t",
            ),
            Identifier(
                "y",
            ),
            Keyword(
                LeftArrow,
            ),
            Char(
                ':',
            ),
            Identifier(
                "t",
            ),
            ParenClose,
            Keyword(
                LeftArrow,
            ),
            Char(
                ':',
            ),
            Identifier(
                "t",
            ),
            Identifier(
                "x",
            ),
            ParenClose,
        ],
    ),
)

(defun func ()-><[i32] string> (func))
Ok(
    Tokens(
        [
            ParenOpen,
            Keyword(
                Defun,
            ),
            Identifier(
                "func",
            ),
            ParenOpen,
            ParenClose,
            Keyword(
                LeftArrow,
            ),
            AngleBracketOpen,
            BracketOpen,
            Type(
                I32,
            ),
            BracketClose,
            Type(
                String,
            ),
            AngleBracketClose,
            ParenOpen,
            Identifier(
                "func",
            ),
            ParenClose,
            ParenClose,
        ],
    ),
)
