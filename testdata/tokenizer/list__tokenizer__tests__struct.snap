---
source: src/tokenizer.rs
expression: "contents.lines().filter_map(|line|\n                if line != \"\" {\n                        Some(format!(\"{line}\\n{:#?}\", Tokens :: from_str(line)))\n                    } else { None }).collect::<Vec<String>>().join(\"\\n\\n\")"
---
(struct Hello { x->i32 y->string })
Ok(
    Tokens(
        [
            ParenOpen,
            Keyword(
                Struct,
            ),
            Identifier(
                "Hello",
            ),
            CurlyOpen,
            Identifier(
                "x",
            ),
            Keyword(
                LeftArrow,
            ),
            Type(
                I32,
            ),
            Identifier(
                "y",
            ),
            Keyword(
                LeftArrow,
            ),
            Type(
                String,
            ),
            CurlyClose,
            ParenClose,
        ],
    ),
)

(struct Hello :t :x { x->:t y->:x })
Ok(
    Tokens(
        [
            ParenOpen,
            Keyword(
                Struct,
            ),
            Identifier(
                "Hello",
            ),
            Char(
                ':',
            ),
            Identifier(
                "t",
            ),
            Char(
                ':',
            ),
            Identifier(
                "x",
            ),
            CurlyOpen,
            Identifier(
                "x",
            ),
            Keyword(
                LeftArrow,
            ),
            Char(
                ':',
            ),
            Identifier(
                "t",
            ),
            Identifier(
                "y",
            ),
            Keyword(
                LeftArrow,
            ),
            Char(
                ':',
            ),
            Identifier(
                "x",
            ),
            CurlyClose,
            ParenClose,
        ],
    ),
)

(struct Hello :t {})
Ok(
    Tokens(
        [
            ParenOpen,
            Keyword(
                Struct,
            ),
            Identifier(
                "Hello",
            ),
            Char(
                ':',
            ),
            Identifier(
                "t",
            ),
            CurlyOpen,
            CurlyClose,
            ParenClose,
        ],
    ),
)
